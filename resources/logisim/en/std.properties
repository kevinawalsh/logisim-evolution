#
# std/Builtin.java
#
builtinLibrary = Built-In
# instance/StdAttr.java
stdFacingAttr = Facing
stdDataWidthAttr = Data Bits
stdTriggerAttr = Trigger
stdTriggerRising = Rising Edge
stdTriggerFalling = Falling Edge
stdTriggerHigh = High Level
stdTriggerLow = Low Level
stdLabelAttr = Label
stdLabelFontAttr = Label Font
stdLabelLocAttr = Label Location
stdLabelCenter = Center
stdLabelColorAttr = Label Color
# instance/InstanceTextField.java
changeLabelAction = Change Label
stdAppearanceAttr = Appearance
stdClassicAppearance = Classic Logisim
stdEvolutionAppearance = ANSI
stdCustomAppearance = Custom
#
# std/base/Base.java
#
baseLibrary = Mouse Tools

# std/base/BitExtender.java
extenderComponent = Bit Extender
extenderInAttr = Bit Width In
extenderOutAttr = Bit Width Out
extenderTypeAttr = Extension Type
extenderOneType = One
extenderZeroType = Zero
extenderSignType = Sign
extenderInputType = Input
extenderMainLabel = extend
extenderOneLabel = 1
extenderZeroLabel = 0
extenderSignLabel = sign
extenderInputLabel = input

# std/base/Clock
clockComponent = Clock
clockHighAttr = High Duration
clockLowAttr = Low Duration
clockPhaseAttr = Phase Offset
clockDurationValue = %s Ticks
clockDurationOneValue = 1 Tick
durationSmallMessage = Value must be at least %s.
durationLargeMessage = Value must be %s or less.
freqInvalidMessage = Value is not a valid integer

# std/base/Pin
pinComponent = Pin
pinInputName = Input
pinOutputName = Output
pinTypeAttr = Type
pinInputOption = Input
pinOutputOption = Output
pinBehaviorAttr = Behavior
pinSimpleOption = Simple
pinTristateOption = Tri-state
pinPullUpOption = Pull Up
pinPullDownOption = Pull Down
pinLabelLocAttr = Label Location
pinInputToolTip = Add an input pin
pinOutputToolTip = Add an output pin
pinFrozenTitle = Pin Attached To Supercircuit.
pinFrozenQuestion = The pin is tied to the supercircuit's state. Create a new circuit state?
pinEditUnsignedDecimalTitle = Enter Unsigned Decimal
pinEditSignedDecimalTitle = Enter Signed Decimal
pinEditRange = Enter value in range %s to %s:
pinEditRangeTristate = Enter value in range %s to %s (use "x" for unknown value):

# std/base/Probe
probeComponent = Probe

# std/base/PullResistor
pullComponent = Pull Resistor
pullTypeAttr = Pull Direction
pullZeroType = Zero
pullOneType = One
pullErrorType = Error

# std/base/Text.java
textComponent = Label
textTextAttr = Text
textFontAttr = Font
textHorzAlignAttr = Horizontal Alignment
textHorzAlignLeftOpt = Left
textHorzAlignRightOpt = Right
textHorzAlignCenterOpt = Center
textVertAlignAttr = Vertical Alignment
textVertAlignTopOpt = Top
textVertAlignBaseOpt = Base
textVertAlignBottomOpt = Bottom
textVertAlignCenterOpt = Center

# std/base/Tunnel.java
tunnelComponent = Tunnel

#
# std/Wiring.java
#
wiringLibrary = Wiring
wiringGateAttr = Gate Location
wiringGateBottomRightOption = Bottom/Right
wiringGateTopLeftOption = Top/Left

# std/wiring/Transistor.java
transistorComponent = Transistor
transistorTypeAttr = Type
transistorTypeP = P-Type
transistorTypeN = N-Type
transistorNGate = gate: when high, allows current to flow through transistor
transistorNSource = source: a low source will pull drain low (only when gate is high)
transistorNDrain = drain: a low source will pull drain low (only when gate is high)
transistorPGate = gate: when low, allows current to flow through transistor
transistorPSource = source: a high source will pull drain high (only when gate is low)
transistorPDrain = drain: a high source will pull drain high (only when gate is low)

# std/wiring/TransmissionGate.java
transmissionGateComponent = Transmission Gate
transmissionGatePGate = p-gate: when high, allows high source to pass through to drain
transmissionGateNGate = n-gate: when low, allows low source to pass through to drain
transmissionGateSource = source: controls drain, depending on p-gate and n-gate
transmissionGateDrain = drain: controlled by source, depending on p-gate and n-gate

# std/wiring/Power.java
powerComponent = Power

# std/wiring/Ground.java
groundComponent = Ground

#
# std/Gates.java
#
gatesLibrary = Gates
gateSizeAttr = Gate Size
gateSizeNarrowOpt = Narrow
gateSizeNormalOpt = Medium
gateSizeWideOpt = Wide
gateNegateAttr = Negate %s
gateInputsAttr = Number Of Inputs
gateOutput01 = 0/1
gateOutput0Z = 0/floating
gateOutputZ1 = floating/1
gateOutputAttr = Output Value
xorBehaviorAttr = Multiple-Input Behavior
xorBehaviorOne = When one input is on
xorBehaviorOdd = When an odd number are on
# std/Constant.java
constantComponent = Constant
constantValueAttr = Value
# std/NotGate.java
notGateComponent = NOT Gate
# std/Buffer.java
bufferComponent = Buffer
# std/AndGate.java
andGateComponent = AND Gate
# std/NandGate.java
nandGateComponent = NAND Gate
# std/NorGate.java
norGateComponent = NOR Gate
# std/OrGate.java
orGateComponent = OR Gate
# std/XorGate.java
xorGateComponent = XOR Gate
# std/XnorGate.java
xnorGateComponent = XNOR Gate
# std/OddParityGate.java
oddParityComponent = Odd Parity
# std/EvenParityGate.java
evenParityComponent = Even Parity
# std/ControlledBuffer.java
controlledBufferComponent = Tri-state Buffer
controlledInverterComponent = Tri-state Inverter
controlledControlOption = Control Line Location
controlledLeftHanded = Left-Handed
controlledRightHanded = Right-Handed
# std/PLA*.java
plaSaveDialogTitle = Save PLA Program
plaLoadDialogTitle = Load PLA Program
plaSaveErrorTitle = Error Saving PLA Program
plaLoadErrorTitle = Error Loading PLA Program
plaFileOpenError = Could not open file.
plaFileCreateError = Could not create file.
plaEditMenuItem = Edit PLA Program...
plaEditorTitle = PLA Program Editor
plaClickToEdit = (click to edit)
plaProgram = Program
#
# std/Memory.java
#
memoryLibrary = Memory
memEnableLabel = en
# AbstractFlipFlop.java
flipFlopEnableAttr = Include Enable?
flipFlopClockTip = Clock: state updates on trigger
flipFlopQTip = Current flip-flop state
flipFlopNotQTip = Complement of current flip-flop state
flipFlopResetTip = Clear: When 1, pin state to 0 asynchronously
flipFlopPresetTip = Preset: When 1, pin state to 1 asynchronously
flipFlopEnableTip = Enable: When 0, clock triggers are ineffective
# std/Counter.java
counterComponent = Counter
counterMaxAttr   = Maximum Value
counterGoalAttr  = Action On Overflow
counterGoalWrap  = Wrap around
counterGoalStay  = Stay at value
counterGoalContinue = Continue counting
counterGoalLoad  = Load next value
counterQTip      = Output: current value of counter
counterClockTip  = Clock: value may update on trigger
counterDataTip   = Data: value to load into counter
counterLoadTip   = Load: when 1, loads from data input
counterEnableTip = Enable: when 1, counter increments or decrements
counterUpDownTip = UpDown: when 1, counter increments, when 0, counter decrements
counterResetTip  = Clear: when 1, resets to 0 asynchronously
counterCarryTip  = Carry: is 1 when value reaches maximum (minimum if decrementing)
counterEnableLabel = ct
counterLabel = ctr
# std/DFlipFlop.java
dFlipFlopComponent = D Flip-Flop
# std/TFlipFlop.java
tFlipFlopComponent = T Flip-Flop
# std/JKFlipFlop.java
jkFlipFlopComponent = J-K Flip-Flop
# std/SRFlipFlop.java
srFlipFlopComponent = S-R Flip-Flop
# std/Random.java
randomSeedAttr = Seed
randomComponent = Random Generator
randomQTip = Output: current number in sequence
randomClockTip = Clock: value may update on trigger
randomNextTip = Enable: steps to next in sequence on clock trigger
randomResetTip = Clear: When 1, resets to initial seed asynchronously
randomLabel = RNG
randomWidthLabel = (%sb)
# std/Register.java
registerComponent = Register
registerQTip = Output: register's current value
registerDTip = Data: value stored on clock trigger
registerClkTip = Clock: value updates on trigger
registerClrTip = Clear: When 1, pin value to 0 asynchronously
registerEnableTip = Enable: When 0, clock triggers are ineffective
registerLabel = reg
registerWidthLabel = (%sb)
registerShowInTab = Show in Registers Tab
# std/RamFactory.java
ramComponent = RAM
# std/RomFactory.java
romComponent = ROM
romContentsAttr = Contents
romContentsValue = (click to edit)
romChangeAction = Edit ROM Contents
# std/Ram.java
ramAddrWidthAttr = Address Bit Width
ramDataWidthAttr = Data Bit Width
ramTypeAttr = Memory Type
ramTypeVolatile = Volatile
ramTypeNonVolatile = Non-Volatile
ramDataLabel = D
ramAddrLabel = A
ramWELabel = S
ramOELabel = L
ramGigabyteLabel = %sGB RAM
ramMegabyteLabel = %sMB RAM
ramKilobyteLabel = %sKB RAM
ramByteLabel = %sB RAM
romGigabyteLabel = %sGB ROM
romMegabyteLabel = %sMB ROM
romKilobyteLabel = %sKB ROM
romByteLabel = %sB ROM
memDataTip = Data: value loaded from address
memDataTip0 = Data: value loaded from address
memDataTip1 = Data1: value loaded from address+1
memDataTip2 = Data2: value loaded from address+2
memDataTip3 = Data3: value loaded from address+3
memAddrTip = Address: location accessed in memory
memLineSize = Line size
memSingle = Single
memDual = Dual
memQuad = Quad
memCSTip = Chip select: 0 disables component
ramClkTip = Clock: memory value updates on clock trigger
ramOETip = Load: if 1, load memory to output
ramWETip = Store: if 1, store input to memory
ramLETip0 = Enable0: Store-enable for address+0
ramLETip1 = Enable1: Store-enable for address+1
ramLETip2 = Enable2: Store-enable for address+2
ramLETip3 = Enable3: Store-enable for address+3
ramBusTip0 = Data: value loaded or stored at address
ramBusTip1 = Data1: value loaded or stored at address+1
ramBusTip2 = Data2: value loaded or stored at address+2
ramBusTip3 = Data3: value loaded or stored at address+3
ramInTip0 = Input: value to be stored at address
ramInTip1 = Input1: value to be stored at address+1
ramInTip2 = Input2: value to be stored at address+2
ramInTip3 = Input3: value to be stored at address+3
ramBusAttr = Data Interface
ramBusSynchCombined = One synchronous load/store port
ramBusAsynchCombined = One asynchronous load/store port
ramBusSeparate = Separate load and store ports
ramBidirDataBus = One bidirectional databus
ramSeparateDataBus = Seperate databus for read and write
ramDataAttr = Databus implementation
ramAttrRdTick = Read Implementation
ramAttrRdTickDefault = Read on selected clock edge
ramAttrRdTickEarly = Wait 1 sysclk before read
ramEditMenuItem = Edit Contents...
ramClearMenuItem = Clear Contents
ramLoadMenuItem = Load Memory Image...
ramSaveMenuItem = Save Memory Image...
ramConfirmClearTitle = Confirm Clear
ramConfirmClearMsg = Are you sure you wish to zero out the memory?
ramLoadDialogTitle = Load Memory Image
ramLoadErrorTitle = Memory Image Load Error
ramSaveDialogTitle = Save Memory Image
ramSaveErrorTitle = Memory Image Save Error
# std/memory/ShiftRegister.java
shiftRegisterComponent = Shift Register
shiftRegisterLabel1 = shift reg
shiftRegisterLabel2 = %sx%s
shiftRegLengthAttr = Number of Stages
shiftRegParallelAttr = Parallel Load
shiftRegShiftTip = Shift: shift is disabled when 0
shiftRegClockTip = Clock: values may update on trigger
shiftRegClearTip = Clear: when 1, resets all to 0 asynchronously
shiftRegInTip    = Input: value to be shifted into first stage
shiftRegOutTip   = Output: is content of last stage
shiftRegLoadTip  = Load: when 1 (with shift = 0), all stages load from inputs
#
# std/Plexers.java
#
plexerLibrary = Plexers
plexerSelectBitsAttr = Select Bits
plexerThreeStateAttr = Three-state?
plexerDisabledAttr = Disabled Output
plexerDisabledFloating = Floating
plexerDisabledZero = Zero
plexerEnableAttr = Include Enable?
plexerSelectLocAttr = Select Location
plexerSelectTopRightOption = Top/Right
plexerSelectBottomLeftOption = Bottom/Left
# std/Multiplexer.java
multiplexerComponent = Multiplexer
multiplexerSelectTip = Select: identifies which input becomes output
multiplexerEnableTip = Enable: when not 0, output is the selected input
multiplexerInTip = Input %s
multiplexerOutTip = Output
# std/Demultiplexer.java
demultiplexerComponent = Demultiplexer
demultiplexerSelectTip = Select: identifies which output receives input
demultiplexerEnableTip = Enable: when not 0, selected output is input
demultiplexerInTip = Input
demultiplexerOutTip = Output %s
# std/Decoder.java
decoderComponent = Decoder
decoderSelectTip = Select: identifies which output is 1
decoderEnableTip = Enable: when not 0, selected output is 1
decoderOutTip = Output %s
# std/plexers/PriorityEncoder.java
priorityEncoderComponent = Priority Encoder
priorityEncoderInTip = Input %s
priorityEncoderOutTip = Output: address of highest-indexed 1 input
priorityEncoderEnableInTip = Enable Input: 0 disables the component
priorityEncoderEnableOutTip = Enable Output: 1 if enabled and no inputs are 1
priorityEncoderGroupSignalTip = Group Select: 1 if enabled and any input is 1
# std/BitSelector.java
bitSelectorComponent = Bit Selector
bitSelectorGroupAttr = Output Bits
bitSelectorOutputTip = Output: value of selected group of bits from data
bitSelectorDataTip = Data
bitSelectorSelectTip = Select: identifies which group from data is selected
#
# arith/Arithmetic.java
#
arithmeticLibrary = Arithmetic
# arith/Adder.java
adderComponent = Adder
adderInputTip = Input: one of the numbers to add
adderOutputTip = Output: the sum of the inputs (plus carry in)
adderCarryInTip = Carry In: if 1, an additional 1 is added to output
adderCarryOutTip = Carry Out: 1 if the sum overflows the available bits
# arith/Subtractor.java
subtractorComponent = Subtractor
subtractorMinuendTip = Minuend: the number from which to subtract
subtractorSubtrahendTip = Subtrahend: the number to subtract from the minuend
subtractorOutputTip = Output: the difference of the minuend and the subtrahend
subtractorBorrowInTip = Borrow In: if 1, output is decreased by 1
subtractorBorrowOutTip = Borrow Out: 1 if the difference yields a negative value
# arith/Multiplier.java
multiplierComponent = Multiplier
multiplierInputTip = Input: one of the numbers to multiply
multiplierOutputTip = Output: the product of the inputs, plus the carry in
multiplierCarryInTip = Carry In: an amount to be added into the output
multiplierCarryOutTip = Carry Out: the upper bits of the product
# arith/Divider.java
dividerComponent = Divider
dividerUpperInput = upper
dividerRemainderOutput = rem
dividerDividendLowerTip = Dividend Lower: the lower half of the number to divide
dividerDividendUpperTip = Dividend Upper: the upper half of the number to divide
dividerDivisorTip = Divisor: the number by which to divide
dividerOutputTip = Output: the result of dividing the dividend by the divisor
dividerRemainderTip = Remainder: the remainder (dividend - output * divisor)
# arith/Negator.java
negatorComponent = Negator
negatorInputTip = Input: the number to be negated
negatorOutputTip = Output: the two's-complement negation of the input
# arith/Comparator.java
comparatorComponent = Comparator
comparatorType = Numeric Type
unsignedOption = Unsigned
twosComplementOption = 2's Complement
comparatorInputATip = A: the number preceding the comparison operation
comparatorInputBTip = B: the number following the comparison operation
comparatorLessTip = Less: 1 if A is less than B
comparatorEqualTip = Equal: 1 if A is equal to B
comparatorGreaterTip = Greater: 1 if A is greator than B
# arith/Shifter.java
shifterComponent = Shifter
shifterShiftAttr = Shift Type
shiftLogicalLeft = Logical Left
shiftLogicalRight = Logical Right
shiftArithmeticRight = Arithmetic Right
shiftRollLeft = Rotate Left
shiftRollRight = Rotate Right
shifterDistanceTip = Distance: how far to shift the input
shifterInputTip = Input: bits to be shifted
shifterOutputTip = Output: result of shifting the input
# arith/BitAdder.java
bitAdderComponent = Bit Adder
bitAdderInputTip = Input: the bits to be counted
bitAdderOutputManyTip = Output: how many input bits are 1
# arith/BitFinder.java
bitFinderComponent = Bit Finder
bitFinderFindLabel = find
bitFinderHighLabel = high
bitFinderLowLabel = low
bitFinderHighOption = Highest-order %s
bitFinderLowOption = Lowest-order %s
bitFinderTypeAttr = Type
bitFinderIndexHighTip = Index: index of input's highest-order %s
bitFinderIndexLowTip = Index: index of input's lowest-order %s
bitFinderPresentTip = Present: 1 if input contains a %s
bitFinderInputTip = Input: the bits to be searched
#
# io
#
# io/Io.java
ioLibrary = Input/Output
ioLabelCenter = Center
ioBitWidthAttr = Bit Width
ioColorAttr = Color
ioLabelLocAttr = Label Location
ioLabelColorAttr = Label Color
ioActiveAttr = Active on High?
# io/Button.java
buttonComponent = Button
# io/Joystick.java
joystickComponent = Joystick
returnToCenter = Return to Center?
# io/Keyboard.java
keyboardComponent = Keyboard
keybDesc = keyboard (buffer cap. %s)
keybBufferLengthAttr = Buffer Length
asciiWidthAttr = ASCII Size
keybClearTip = Clear: 1 empties buffer
keybClockTip = Clock: trigger consumes the buffer's front character
keybEnableTip = Read enable: 0 disables clock
keybAvailTip = Available: 1 when buffer contains characters
keybOutputTip = Data: ASCII value of buffer's front character
# io/Led.java
ledComponent = LED
RGBledComponent = RGBLED
# io/DipSwitch.java
dipswitchComponent = Dip switch
nrOfSwitch = Number of Switch
# io/SevenSegment.java
sevenSegmentComponent = 7-Segment Display
# io/HexDigit.java
hexDigitComponent = Hex Digit Display
hexDigitDataTip = Data: nibble to display in hex
hexDigitDPTip = DecimalPoint: lights the decimal point
# io/DotMatrix.java
dotMatrixComponent = LED Matrix
ioMatrixInput = Input Format
ioMatrixRows = Matrix Rows
ioMatrixCols = Matrix Columns
ioOnColor = On Color
ioOffColor = Off Color
ioBackgroundColor = Background
ioMatrixPersistenceAttr = Light Persistence
ioMatrixShape = Dot Shape
ioInputColumn = Columns
ioInputRow = Rows
ioInputSelect = Select Rows/Columns
ioShapeCircle = Circular
ioShapeSquare = Square
# io/Video.java
rgbVideoComponent = RGB Video
rgbVideoCursor = Cursor
rgbVideoReset = Reset Behavior
rgbVideoColor = Color Model
rgbVideoCLK = Clock
rgbVideoWE = Write Enable
rgbVideoX = X Coordinate
rgbVideoY = Y Coordinate
rgbVideoData = Data in %s format
rgbVideoRST = Reset
rgbVideoWidth = Width
rgbVideoHeight = Height
rgbVideoScale = Scale
# io/Tty.java
ttyComponent = TTY
ttyDesc = TTY (%s rows, %s cols)
ttyDescShort = TTY
ttyRowsAttr = Rows
ttyColsAttr = Columns
ttyClearTip = Clear: 1 clears screen
ttyClockTip = Clock: trigger adds character on input
ttyEnableTip = Write enable: 0 disables clock
ttyInputTip = Data: ASCII value of next character to write
# io/PortIO.java
pioComponent = Port I/O
pioNumber = Number of PIN
pioShowBus = Connection Type ?
pioBuses = One or more Buses
pioPins = Single Pin
pioDirection = Direction
#
# hdl
#
# hdl/hdl.java
hdlLibrary = HDL-IP
# hdl/VhdlEntity.java
vhdlEntityName = VHDL Entity Name
vhdlNew = New VHDL Entity
vhdlContentAttr = Content
vhdlContentValue = (click to edit)
# hdl/VhdlParser.jave
emptySourceException = Cannot parse empty content
duplicatedEntityException = Duplicated entity declaration detected
CannotFindEntityException = The entity declaration cannot be found
vhdlExpectingEndEntity  = Expecting "end %s;" to complete entity declaration.
vhdlWrongEndEntity  = Expecting "end %s;" to complete entity declaration, but found "end %s;".
vhdlTrailingContent  = Expecting end of file, but found additional code instead.
CannotFindLibrariesException = The libraries declarations cannot be found
invalidVhdlFile = The VHDL file structure is invalid
missingBracketException = Missing braket in the ports declaration
portDeclarationException = Illegal port syntax
multiplePortsDeclarationException = Illegal multiple ports syntax
genericDeclarationException = Illegal generics syntax
genericExpectedNames = Expected parameter name(s) and type.
genericExpectedOpenParen = Expected left parenthesis.
genericExpectedCloseParen = Expected right parenthesis or semicolon.
genericTypeException = Unsupported generics type
genericValueException = Unrecognized generics default value
multipleGenericDeclarationException = Illegal multiple generics syntax
vectorDeclarationException = Illegal vector syntax
lineDeclarationException = Illegal line syntax
invalidTypeException = Invalid port type
keywordNotFoundException = Keyword '%s' cannot be found in the entity description
# HdlContentEditor.java
hdlFrameTitle = Logisim-evolution: HDL Editor
hdlOpenButton = Import VHDL...
hdlSaveButton = Export VHDL...
hdlOpenDialog = Import VHDL file
hdlSaveDialog = Export VHDL file
vhdlDuplicateNameError = Invalid VHDL Entity name. Names must be unique.
vhdlKeywordNameError = Invalid VHDL Entity name. That is a reserved keyword.
vhdlInvalidNameError = Invalid VHDL Entity name. Names must:\n * start with a letter,\n * contain only letters,numbers, and underscores,\n * not end with an underscore,\n * not contain two consecutive underscores.
validateAndSaveButton = Validate & Save
validateButton = Validate VHDL
closeButton = Close Window
importMessage = Any change made to this component will be lost. Import anyway ?
importTitle = Confirm Import
importOption = Import
okOption = OK
cancelOption = Cancel
confirmCloseYes = Yes
confirmCloseNo = No
confirmCloseBackup = Create backup
confirmCloseTitle = Confirm close
confirmCloseMessage = Any change made to this component will be lost. Close anyway ?
# HdlContent
validationErrorButton = Continue
validationParseError = VHDL Parsing Error

tclInterfaceDefinition = TCL interface VHDL entity
tclInterfaceDefinitionValue = (click to edit)

# io/FileViewer.java
fileViewerComponent = File Viewer
ioFileViewerLines = Lines
ioFileViewerCols = Columns
ioFileViewerByLine = Line Number
ioFileViewerByOffset = Character Offset
ioFileViewerByAddress = Address Label
ioFileViewerSelect = Select
ioFileViewerAddrWidth = Address Bit Width
ioFileViewerClickToLoad = (click to load)
ioFileViewerContents = Contents
fileViewerLoadDialogTitle = Select File to View
